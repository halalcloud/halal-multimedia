#include "stdAfx.h"
#include "ElementStreamParserTest.h"
#include "CElementStreamParser.h"
CPPUNIT_TEST_SUITE_REGISTRATION(CElementStreamParserTest);
CElementStreamParserTest::CElementStreamParserTest(void)
{
}

CElementStreamParserTest::~CElementStreamParserTest(void)
{
}

void CElementStreamParserTest::setUp()
{

}

void CElementStreamParserTest::tearDown()
{

}

void CElementStreamParserTest::ParserTest()
{
	//* {{ 正确,解析PES头.ccut_50926_0.ts 的第三个包.0x00,
	int iRet = 0;
	{
		wzd::CElementStreamParser parser;
		unsigned char buf[] = {0x00,0x00,0x01,0xE0,0xAD,0xBD,0x80,0xC0,0x0A,0x31,0x00,0x07,0xD8,0x61,0x11,0x00,0x07,0xBC,0x41,0x00,0x00,0x00,0x01,0x09,0xF0,0x00,0x00,0x00,0x01,0x67,0x4D,0x40,0x1F,0x9A,0x72,0x81,0x40,0x7B,0x7F,0xE0,0x00,0x80,0x00,0x62,0x00,0x00,0x03,0x00,0x02,0x00,0x00,0x03,0x00,0x64,0x1E,0x30,0x62,0x2C,0x00,0x00,0x00,0x01,0x68,0xE9,0x23,0x2C,0x80,0x00,0x00,0x01,0x06,0x05,0xFF,0xFF,0x8B,0xDC,0x45,0xE9,0xBD,0xE6,0xD9,0x48,0xB7,0x96,0x2C,0xD8,0x20,0xD9,0x23,0xEE,0xEF,0x78,0x32,0x36,0x34,0x20,0x2D,0x20,0x63,0x6F,0x72,0x65,0x20,0x31,0x30,0x30,0x20,0x2D,0x20,0x48,0x2E,0x32,0x36,0x34,0x2F,0x4D,0x50,0x45,0x47,0x2D,0x34,0x20,0x41,0x56,0x43,0x20,0x63,0x6F,0x64,0x65,0x63,0x20,0x2D,0x20,0x43,0x6F,0x70,0x79,0x6C,0x65,0x66,0x74,0x20,0x32,0x30,0x30,0x33,0x2D,0x32,0x30,0x31,0x30,0x20,0x2D,0x20,0x68,0x74,0x74,0x70,0x3A,0x2F,0x2F,0x77,0x77,0x77,0x2E,0x76,0x69,0x64,0x65,0x6F,0x6C,0x61,0x6E,0x2E,0x6F};
		const unsigned char* pBuf = buf;

		CPPUNIT_ASSERT_NO_THROW(iRet = parser.Parser(pBuf, sizeof(buf)));
		CPPUNIT_ASSERT(19 == iRet);
		wzd::PESPacket pkt = parser.GetESInfo();
		CPPUNIT_ASSERT(pkt.stream_id == 0xe0);
		CPPUNIT_ASSERT(pkt.PES_packet_length == 44477);
		CPPUNIT_ASSERT(pkt.packet_start_code_prefix[0] == 0 &&
			pkt.packet_start_code_prefix[1] == 0 &&
			pkt.packet_start_code_prefix[2] == 1);
		CPPUNIT_ASSERT(0 == pkt.PES_scrambling_control);
		CPPUNIT_ASSERT(0 == pkt.PES_priority);
		CPPUNIT_ASSERT(0 == pkt.data_alignment_indicator);
		CPPUNIT_ASSERT(0 == pkt.copyright);
		CPPUNIT_ASSERT(0 == pkt.original_or_copy);
		CPPUNIT_ASSERT(3 == pkt.PTS_DTS_flags);
		CPPUNIT_ASSERT(false == pkt.ESCR_flag);
		CPPUNIT_ASSERT(false == pkt.ES_rate_flag);
		CPPUNIT_ASSERT(false == pkt.DSM_trick_mode_flag);
		CPPUNIT_ASSERT(false == pkt.additional_copy_info_flag);
		CPPUNIT_ASSERT(false == pkt.PES_CRC_flag);
		CPPUNIT_ASSERT(false == pkt.PES_extension_flag);
		CPPUNIT_ASSERT(10 == pkt.PES_header_data_length);
		CPPUNIT_ASSERT(126000 == pkt.PTS);
		CPPUNIT_ASSERT(122400 == pkt.DTS);
	}
	//* }} */

	//* {{ 错误,解析PES头.实际上是ES数据.
	{
		iRet = 0xfffff;
		wzd::CElementStreamParser parser;
		unsigned char buf[] = {0x72,0x67,0x2F,0x78,0x32,0x36,0x34,0x2E,0x68,0x74,0x6D,0x6C,0x20,0x2D,0x20,0x6F,0x70,0x74,0x69,0x6F,0x6E,0x73,0x3A,0x20,0x63,0x61,0x62,0x61,0x63,0x3D,0x31,0x20,0x72,0x65,0x66,0x3D,0x34,0x20,0x64,0x65,0x62,0x6C,0x6F,0x63,0x6B,0x3D,0x31,0x3A,0x30,0x3A,0x30,0x20,0x61,0x6E,0x61,0x6C,0x79,0x73,0x65,0x3D,0x30,0x78,0x31,0x3A,0x30,0x78,0x31,0x31,0x31,0x20,0x6D,0x65,0x3D,0x75,0x6D,0x68,0x20,0x73,0x75,0x62,0x6D,0x65,0x3D,0x36,0x20,0x70,0x73,0x79,0x3D,0x31,0x20,0x70,0x73,0x79,0x5F,0x72,0x64,0x3D,0x31,0x2E,0x30,0x30,0x3A,0x30,0x2E,0x30,0x30,0x20,0x6D,0x69,0x78,0x65,0x64,0x5F,0x72,0x65,0x66,0x3D,0x30,0x20,0x6D,0x65,0x5F,0x72,0x61,0x6E,0x67,0x65,0x3D,0x31,0x36,0x20,0x63,0x68,0x72,0x6F,0x6D,0x61,0x5F,0x6D,0x65,0x3D,0x31,0x20,0x74,0x72,0x65,0x6C,0x6C,0x69,0x73,0x3D,0x31,0x20,0x38,0x78,0x38,0x64,0x63,0x74,0x3D,0x30,0x20,0x63,0x71,0x6D,0x3D,0x30,0x20,0x64,0x65,0x61,0x64,0x7A,0x6F,0x6E,0x65,0x3D,0x32,0x31,0x2C,0x31,0x31,0x20};
		const unsigned char* pBuf = buf;
		CPPUNIT_ASSERT_NO_THROW(iRet = parser.Parser(pBuf, sizeof(buf)));
		CPPUNIT_ASSERT(0 == iRet);
	}

	//* {{ 解析的是Private1的数据.
	{
		iRet = 0xfffff;
		wzd::CElementStreamParser parser;
		unsigned char buf[] = {0x00, 0x00, 0x01, 0xbd,0x07,0xec,0x81,0x81,0x08,0x21,0x00,0x07,0x85,0x27,0x1e,0x60,0x3a,0x23,0x12,0x08,0x11,0xea,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x3D,0x31,0x20,0x72,0x65,0x66,0x3D,0x34,0x20,0x64,0x65,0x62,0x6C,0x6F,0x63,0x6B,0x3D,0x31,0x3A,0x30,0x3A,0x30,0x20,0x61,0x6E,0x61,0x6C,0x79,0x73,0x65,0x3D,0x30,0x78,0x31,0x3A,0x30,0x78,0x31,0x31,0x31,0x20,0x6D,0x65,0x3D,0x75,0x6D,0x68,0x20,0x73,0x75,0x62,0x6D,0x65,0x3D,0x36,0x20,0x70,0x73,0x79,0x3D,0x31,0x20,0x70,0x73,0x79,0x5F,0x72,0x64,0x3D,0x31,0x2E,0x30,0x30,0x3A,0x30,0x2E,0x30,0x30,0x20,0x6D,0x69,0x78,0x65,0x64,0x5F,0x72,0x65,0x66,0x3D,0x30,0x20,0x6D,0x65,0x5F,0x72,0x61,0x6E,0x67,0x65,0x3D,0x31,0x36,0x20,0x63,0x68,0x72,0x6F,0x6D,0x61,0x5F,0x6D,0x65,0x3D,0x31,0x20,0x74,0x72,0x65,0x6C,0x6C,0x69,0x73,0x3D,0x31,0x20,0x38,0x78,0x38,0x64,0x63,0x74,0x3D,0x30,0x20,0x63,0x71,0x6D,0x3D,0x30,0x20,0x64,0x65,0x61,0x64,0x7A,0x6F,0x6E,0x65,0x3D,0x32,0x31,0x2C};
		const unsigned char* pBuf = buf;
		CPPUNIT_ASSERT_NO_THROW(iRet = parser.Parser(pBuf, sizeof(buf)));
	}
	//* }}*/
	{
		iRet = 0xffff;
		wzd::CElementStreamParser parser;
		unsigned char buf[] = {0x00,0x00,0x01,0xC1,0x07,0xC7,0x84,0x80,0x05,0x2D,0x60,0x5F,0xAC,0xD3,0x56,0xE1,0x39,0xFF,0x9B,0x90,0x46,0x8C,0xE6,0xE1,0x2D,0xB9,0x96,0x93,0x52,0x92,0x99,0x29,0x2A,0x51,0x22,0xA4,0xA8,0x54,0x50,0x1E,0x49,0xE6,0xD9,0xD3,0xBA,0x8E,0xEB,0x7C,0x6E,0xEC,0xD7,0xB4,0x7C,0xD7,0x63,0xDE,0xB5,0x83,0xEA,0x89,0x29,0xB7,0x75,0x33,0xC5,0x4C,0xB9,0x31,0xE4,0xE9,0x68,0xA2,0xC0,0x5E,0xCE,0xFD,0xF3,0xD3,0x54,0xAA,0x24,0x15,0xA4,0xEA,0x4A,0x34,0x82,0x18,0x54,0xAB,0x51,0x92,0x15,0x05,0x09,0x4A,0xDD,0x30,0xC5,0xC8,0xEC,0xCC,0xA4,0xCE,0xE4,0xC0,0x90,0x2C,0xE6,0x1B,0xD7,0xE6,0x39,0xAF,0x9E,0x8E,0xAE,0xED,0x9B,0x7D,0xE2,0x2D,0x54,0xCE,0x03,0x8D,0x6B,0x9F,0xAA,0x5B,0x7F,0x2A,0xEF,0x93,0x58,0x14,0xB1,0x2A,0x4F,0xD6,0xAE,0x90,0x58,0x06,0x29,0xDC,0x04,0x8F,0xF9,0xA0,0x90,0xAE,0xE4,0x4B,0x42,0xA8,0xD4,0x3A,0x62,0x0F,0x89,0xF0,0xE2,0x40,0x5F,0x70,0x11,0x63,0x39,0xB8,0x4B,0x7B,0xF1,0x96,0x93,0x42,0x53,0x25,0x25,0x4A,0x24,0x54,0x95,0x2A};
		const unsigned char* pBuf = buf;
		iRet = parser.Parser(pBuf, sizeof(buf));
	}
}
